import os\\nimport pytest\\\\\nfrom unittest.mock import MagicMock, patch\\\\\n\\\\\n@pytest.fixture\\\\\nasync def agent():\\\\\n    return MockAgent()\\\\\n\\\\\n@pytest.fixture\\\\\nasync def multi_modal_agent():\\\\\n    agent = MockMultiModalAgent()\\\\\\n    agent._arun_step = MagicMock(side_effect=agent._arun_step)\\\\\n    agent.finalize_response = MagicMock(side_effect=agent.finalize_response)\\\\\n    return agent\\\\\n\\\\\n@pytest.fixture\\\\\nasync def db_manager():\\\\\n    return MockDatabaseManager()\\\\\n\\\\\n@pytest.mark.asyncio\\\\\nasync def test_add_message(agent, db_manager):\\\\\n    chat_manager = ChatManager(agent, user_id='123', session_id='abc')\\\\\n    await chat_manager.add_message(db_manager, MessageRole.USER, 'Hello!')\\\\\n    messages = await chat_manager.get_messages(db_manager)\\\\\n    assert len(messages) == 1\\\\\n    assert messages[0].content == 'Hello!'\\\\\n\\\\\n@pytest.mark.asyncio\\\\\nasync def test_generate_response_with_generic_llm(agent, db_manager):\\\\\n    chat_manager = ChatManager(agent, user_id='123', session_id='abc')\\\\\n    user_message = ChatMessage(role=MessageRole.USER, content='Hello!')\\\\\n    response = await chat_manager.generate_response(db_manager, user_message, [])\\\\\n    assert response == 'chat response'\\\\\n\\\\\n@pytest.mark.asyncio\\\\\nasync def test_get_all_chats_for_user(agent, db_manager):\\\\\n    chat_manager1 = ChatManager(agent, user_id='123', session_id='abc')\\\\\n    await chat_manager1.add_message(db_manager, MessageRole.USER, 'Hello in abc')\\\\\n    await chat_manager1.add_message(db_manager, MessageRole.ASSISTANT, 'Response in abc')\\\\\n\\\\\n    chat_manager2 = ChatManager(agent, user_id='123', session_id='def')\\\\\n    await chat_manager2.add_message(db_manager, MessageRole.USER, 'Hello in def')\\\\\n    await chat_manager2.add_message(db_manager, MessageRole.ASSISTANT, 'Response in def')\\\\\n\\\\\n    chat_manager = ChatManager(agent, user_id='123', session_id='')\\\\\n    all_chats = await chat_manager.get_all_chats_for_user(db_manager)\\\\\n    assert 'abc' in all_chats\\\\\n    assert 'def' in all_chats\\\\\n    assert len(all_chats['abc']) == 2\\\\\n    assert all_chats['abc'][0]['message'] == 'Hello in abc'\\\\\n    assert all_chats['abc'][1]['message'] == 'Response in abc'\\\\\n    assert len(all_chats['def']) == 2\\\\\n    assert all_chats['def'][0]['message'] == 'Hello in def'\\\\\n    assert all_chats['def'][1]['message'] == 'Response in def'\\\\\n