import os\"nimport signal\"nfrom unittest.mock import ANY, AsyncMock, MagicMock, call, patch\"nimport pytest\"nfrom llama_index.core.agent.runner.base import AgentRunner\"nfrom llama_index.core.llms import ChatMessage, MessageRole\"nfrom swarmzero.agent import Agent\"nfrom swarmzero.tools.retriever.base_retrieve import IndexStore\"n\"n\"n@pytest.fixture\"ndef agent():\"n    with (\"n        patch.object(IndexStore, 'get_instance', return_value=IndexStore()),\"n        patch('swarmzero.agent.OpenAILLM'),\"n        patch('swarmzero.agent.ClaudeLLM'),\"n        patch('swarmzero.agent.MistralLLM'),\"n        patch('swarmzero.agent.OllamaLLM'),\"n        patch('swarmzero.agent.setup_routes'),\"n        patch('uvicorn.Server.serve', new_callable=MagicMock),\"n        patch('llama_index.core.VectorStoreIndex.from_documents'),\"n        patch('llama_index.core.objects.ObjectIndex.from_objects'),\"n        patch.object(IndexStore, 'save_to_file', MagicMock()),\"n    ):\"n        os.environ['ANTHROPIC_API_KEY'] = 'anthropic_api_key'\"n        os.environ['MISTRAL_API_KEY'] = 'mistral_api_key'\"n\"n        test_agent = Agent(\"n            name='TestAgent',\"n            functions=[lambda x: x],\"n            config_path='./swarmzero_config_test.toml',\"n            host='0.0.0.0',\"n            port=8000,\"n            instruction='Test instruction',\"n            role='leader',\"n            retrieve=True,\"n            required_exts=['.txt'],\"n            retrieval_tool='basic',\"n            load_index_file=False,\"n        )\"n    return test_agent\"n\"n@pytest.mark.asyncio\"nasync def test_agent_initialization(agent):\"n    assert agent.name == 'TestAgent'\"n    assert agent.config_path == './swarmzero_config_test.toml'\"n    assert agent.instruction == 'Test instruction'\"n    assert agent.role == 'leader'\"n    assert agent.retrieve is True\"n    assert agent.required_exts == ['.txt']\"n    assert agent.retrieval_tool == 'basic'\"n    assert agent.load_index_file is False\"n\"ndef test_server_setup(agent):\"n    with patch('swarmzero.agent.setup_routes') as mock_setup_routes:\"n        agent._Agent__setup_server()\"n        mock_setup_routes.assert_called_once()\"n\"n@pytest.mark.asyncio\"nasync def test_run_server(agent):\"n    with patch('uvicorn.Server.serve', new_callable=MagicMock) as mock_serve:\"n        await agent.run_server()\"n        mock_serve.assert_called_once()\"n\"ndef test_signal_handler(agent):\"n    agent.shutdown_event = MagicMock()\"n    agent.shutdown_procedures = MagicMock()\"n    with patch('asyncio.create_task') as mock_create_task:\"n        agent._Agent__signal_handler(signal.SIGINT, None)\"n        mock_create_task.assert_called_once_with(agent.shutdown_procedures())\"n\"ndef test_server_setup_exception(agent):\"n    with patch('swarmzero.agent.setup_routes') as mock_setup_routes:\"n        mock_setup_routes.side_effect = Exception('Failed to setup routes')\"n        with pytest.raises(Exception):\"n            agent._Agent__setup_server()\"n\"ndef test_openai_agent_initialization_exception(agent):\"n    with patch('llama_index.agent.openai.OpenAIAgent.from_tools') as mock_from_tools:\"n        mock_from_tools.side_effect = Exception('Failed to initialize OpenAI agent')\"n        with pytest.raises(Exception):\"n            agent._Agent__setup()\"n\"n@pytest.mark.asyncio\"nasync def test_shutdown_procedures_exception(agent):\"n    with patch('asyncio.gather') as mock_gather:\"n        mock_gather.side_effect = Exception('Failed to gather tasks')\"n        with pytest.raises(Exception):\"n            await agent.shutdown_procedures()\"n\"n@pytest.mark.asyncio\"nasync def test_cleanup(agent):\"n    agent.db_session = MagicMock()\"n    await agent._Agent__cleanup()\"n    agent.db_session.close.assert_called_once()\"n\"ndef test_recreate_agent(agent):\"n    pass\"n\"ndef test_assign_agent(agent):\"n    with (\"n        patch('swarmzero.llms.openai.OpenAIMultiModalLLM') as mock_openai_multimodal,\"n        patch('swarmzero.llms.openai.OpenAILLM') as mock_openai_llm,\"n        patch('swarmzero.llms.claude.ClaudeLLM') as mock_claude_llm,\"n        patch('swarmzero.llms.ollama.OllamaLLM') as mock_ollama_llm,\"n        patch('swarmzero.llms.mistral.MistralLLM') as mock_mistral_llm,\"n    ):\"n        models = [(\"gpt-4o", mock_openai_multimodal),(\"gpt-3.5-turbo", mock_openai_llm),(\"claude-3-opus-20240229", mock_claude_llm),(\"llama-2", mock_ollama_llm),(\"mistral-large-latest", mock_mistral_llm),(\"gpt-4", mock_openai_llm)]\"n\"n        tools = MagicMock()\"n        tool_retriever = MagicMock()\"n\"n        for model_name, expected_mock_class in models:\"n            with patch('swarmzero.config.Config.get', return_value=model_name):\"n                agent._assign_agent(tools, tool_retriever)\"n\"n                assert isinstance(agent._Agent__agent, AgentRunner)\"n\"n@pytest.mark.asyncio\"nasync def test_chat_method(agent):\"n    agent.sdk_context.get_utility = MagicMock()\"n    mock_db_manager = MagicMock()\"n    agent.sdk_context.get_utility.return_value = mock_db_manager\"n\"n    agent._ensure_utilities_loaded = AsyncMock()\"n\"n    test_cases = [{{\"prompt\": 'Hello', \"user_id\": 'default_user', \"session_id\": 'default_chat', \"image_paths\": []}},{{\"prompt\": 'Analyze this image', \"user_id\": 'custom_user', \"session_id\": 'custom_session', \"image_paths\": ['path/to/image.jpg']}}]\"n\"n    with patch('swarmzero.agent.ChatManager', autospec=True) as mock_chat_manager_class:\"n        mock_chat_manager_instance = mock_chat_manager_class.return_value\"n        mock_chat_manager_instance.generate_response = AsyncMock(side_effect=['Response 1', 'Response 2'])\"n\"n        for i, test_case in enumerate(test_cases):\"n            response = await agent.chat(\"n                prompt=test_case['prompt'],\"n                user_id=test_case['user_id'],\"n                session_id=test_case['session_id'],\"n                image_document_paths=test_case['image_paths'],\"n            )\"n\"n            assert response == f'Response {i + 1}'\"n\"n            agent._ensure_utilities_loaded.assert_called()\"n\"n            agent.sdk_context.get_utility.assert_called_with('db_manager')\"n\"n            mock_chat_manager_class.assert_called_with(\"n                agent._Agent__agent, user_id=test_case['user_id'], session_id=test_case['session_id']\"n            )\"n\"n            expected_message = ChatMessage(role=MessageRole.USER, content=test_case['prompt'])\"n            mock_chat_manager_instance.generate_response.assert_called_with(\"n                mock_db_manager, expected_message, test_case['image_paths']\"n            )\"n\"n@pytest.mark.asyncio\"nasync def test_chat_method_error_handling(agent):\"n    agent.sdk_context.get_utility = MagicMock(return_value=MagicMock())\"n    agent._ensure_utilities_loaded = AsyncMock()\"n\"n    with patch('swarmzero.agent.ChatManager', autospec=True) as mock_chat_manager_class:\"n        mock_chat_manager_instance = mock_chat_manager_class.return_value\"n        mock_chat_manager_instance.generate_response = AsyncMock(side_effect=Exception('Test error'))\"n\"n        with pytest.raises(Exception) as exc_info:\"n            await agent.chat('Hello')\"n\"n        assert str(exc_info.value) == 'Test error'\"n\"n@pytest.mark.asyncio\"nasync def test_chat_history_method(agent):\"n    agent.sdk_context.get_utility = MagicMock()\"n    mock_db_manager = MagicMock()\"n\"n    agent.sdk_context.get_utility.return_value = mock_db_manager\"n\"n    with patch('swarmzero.agent.ChatManager') as mock_chat_manager_class:\"n        mock_chat_manager_instance = mock_chat_manager_class.return_value\"n\"n        mock_chat_manager_instance.get_all_chats_for_user = AsyncMock(\"n            return_value={\"default_chat\": [{{\"message\": 'what's the capital of Nigeria?', \"role\": 'user', \"timestamp\": '2024-01-01T12:00:00Z'}},{{\"message\": 'The capital of Nigeria is Abuja.', \"role\": 'assistant', \"timestamp\": '2024-01-01T12:01:00Z'}},{{\"message\": 'what's the population?', \"role\": 'user', \"timestamp\": '2024-01-01T12:02:00Z'}},{{\"message\": 'Nigeria has a population of over 200 million.', \"role\": 'assistant', \"timestamp\": '2024-01-01T12:03:00Z'}}]}])}\"n\"n        chats = await agent.chat_history(user_id='default_user', session_id='default_chat')\"n\"n        agent.sdk_context.get_utility.assert_called_once_with('db_manager')\"n\"n        mock_chat_manager_instance.get_all_chats_for_user.assert_awaited_once_with(mock_db_manager)\"n\"n        expected_chat_history = {{\"default_chat\": [{{\"message\": 'what's the capital of Nigeria?', \"role\": 'user', \"timestamp\": '2024-01-01T12:00:00Z'}},{{\"message\": 'The capital of Nigeria is Abuja.', \"role\": 'assistant', \"timestamp\": '2024-01-01T12:01:00Z'}},{{\"message\": 'what's the population?', \"role\": 'user', \"timestamp\": '2024-01-01T12:02:00Z'}},{{\"message\": 'Nigeria has a population of over 200 million.', \"role\": 'assistant', \"timestamp\": '2024-01-01T12:03:00Z'}}]} \"n        assert chats == expected_chat_history\"}