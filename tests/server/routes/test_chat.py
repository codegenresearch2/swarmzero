import pytest\nimport httpx\nimport fastapi\nimport status\nfrom unittest.mock import AsyncMock, MagicMock, patch\nfrom fastapi import APIRouter, FastAPI\nfrom llama_index.core.llms import ChatMessage, MessageRole\nfrom swarmzero.sdk_context import SDKContext\nfrom swarmzero.server.routes.chat import setup_chat_routes\n\n\nclass MockAgent:\n    async def astream_chat(self, content, chat_history):\n        async def async_response_gen():\n            yield "chat response"\n        return type("MockResponse", (), {"async_response_gen": async_response_gen})\n\n    async def achat(self, content, chat_history):\n        return "chat response"\n\nclass MockMultiModalAgent:\n    def create_task(self, content, extra_state=None):\n        return type("MockTask", (), {"task_id": "12345"})\n\n    async def _arun_step(self, task_id):\n        return type("MockResponse", (), {"is_last": True})\n\n    def finalize_response(self, task_id):\n        return "multimodal response"\n\nclass MockDatabaseManager:\n    def __init__(self):\n        self.data = []\n\n    async def insert_data(self, table_name: str, data: dict):\n        self.data.append(data)\n\n    async def read_data(self, table_name: str, filters: dict):\n        return [d for d in self.data if all(d[k] == v[0] for k, v in filters.items())]\n\n@pytest.fixture\ndef agent():\n    return MockAgent()\n\n@pytest.fixture\ndef multi_modal_agent():\n    agent = MockMultiModalAgent()\n    agent._arun_step = AsyncMock(side_effect=agent._arun_step)\n    agent.finalize_response = MagicMock(side_effect=agent.finalize_response)\n    return agent\n\n@pytest.fixture\ndef db_manager():\n    return MockDatabaseManager()\n\n@pytest.fixture\ndef sdk_context():\n    mock_context = MagicMock(spec=SDKContext)\n    mock_context.get_attributes.return_value = {"llm": MagicMock(),\n                                            "agent_class": lambda *args: MagicMock(agent=MockAgent()),\n                                            "tools": [],\n                                            "instruction": "",\n                                            "tool_retriever": None,\n                                            "enable_multi_modal": False,\n                                            }\n    return mock_context\n\n@pytest.fixture\ndef app(agent, sdk_context):\n    fastapi_app = FastAPI()\n    v1_router = APIRouter()\n    setup_chat_routes(v1_router, "test_id", sdk_context)\n    fastapi_app.include_router(v1_router, prefix="/api/v1")\n    return fastapi_app\n\n@pytest.fixture\nasync def client(app):\n    async with httpx.AsyncClient(app=app, base_url="http://test") as test_client:\n        yield test_client\n\n@pytest.mark.asyncio\nasync def test_chat_no_messages(client):\n    form_data = {"user_id": "user1",\n                 "session_id": "session1",\n                 "chat_data": json.dumps({"messages": []}),\n                 }\n    response = await client.post("/api/v1/chat", data=form_data, files={})\n    assert response.status_code == status.HTTP_400_BAD_REQUEST\n    assert "No messages provided" in response.json()["detail"]\n\n@pytest.mark.asyncio\nasync def test_chat_last_message_not_user(client):\n    form_data = {"user_id": "user1",\n                 "session_id": "session1",\n                 "chat_data": json.dumps("{\\"messages\\": [\\\"{\\\\"role\\\\": \\\"SYSTEM\\\\", \\\\\\\