import os\"import string\"import uuid\"from typing import Any, Callable, Dict, List, Optional\"\nfrom dotenv import load_dotenv\"from langtrace_python_sdk import inject_additional_attributes\"from llama_index.core.agent import AgentRunner, ReActAgent\"from llama_index.core.llms import ChatMessage, MessageRole\"from llama_index.core.tools import QueryEngineTool, ToolMetadata\"\nfrom swarmzero.agent import Agent\"from swarmzero.chat import ChatManager\"from swarmzero.llms.llm import LLM\"from swarmzero.llms.utils import llm_from_config_without_agent, llm_from_wrapper\"from swarmzero.sdk_context import SDKContext\"from swarmzero.utils import tools_from_funcs\nload_dotenv()\n\nclass AgentMap(Dict[str, Dict[str, Any]]):\n    def __init__(self):\n        super().__init__()\n\nclass Swarm:\n    id: str\n    name: str\n    instruction: str\n    description: str\n    __llm: LLM\n    __agents: AgentMap\n    __swarm: AgentRunner\n\n    def __init__(self,\n        name: str,\n        description: str,\n        instruction: str,\n        functions: List[Callable],\n        agents: Optional[List[Agent]] = None,\n        llm: Optional[LLM] = None,\n        config_path=\"./swarmzero_config_example.toml\",\n        swarm_id=os.getenv(\"SWARM_ID\", \"\"),\n        sdk_context: Optional[SDKContext] = None,\n        max_iterations: Optional[int] = 10,\n    ):\n        self.id = swarm_id if swarm_id != \"\" else str(uuid.uuid4())\n        self.name = name\n        self.description = description\n        self.instruction = instruction\n        self.__agents = AgentMap()\n        self.functions = functions\n        self.sdk_context = sdk_context if sdk_context is not None else SDKContext(config_path=config_path)\n        self.__config = self.sdk_context.get_config(self.name)\n        self.__llm = llm if llm is not None else llm_from_config_without_agent(self.__config)\n        self.max_iterations = max_iterations\n        self.__utilities_loaded = False\n\n        if agents is None:\n            agents = self.sdk_context.generate_agents_from_config()\n\n        if agents:\n            for agent in agents:\n                self.sdk_context.add_resource(agent, resource_type=\"agent\")\n                self.__agents[agent.name] = {\"id\": agent.id,\n                    \"agent\": agent,\n                    \"role\": agent.role,\n                    \"description\": agent.description,\n                    \"sdk_context\": self.sdk_context\n                }\n\n            self.sdk_context.add_resource(self, resource_type=\"swarm\")\n            self._build_swarm()\n        else:\n            raise ValueError(\"no agents provided in params or config file\") \n\n    def _build_swarm(self):\n        query_engine_tools = (\n            [\n                QueryEngineTool(query_engine=agent_data[\"agent\"],\n                    metadata=ToolMetadata(name=self._format_tool_name(agent_name),\n                    description=agent_data[\"description\"]))\n                for agent_name, agent_data in self.__agents.items()\n            ]\n            if self.__agents\n            else []\n        )\n\n        custom_tools = tools_from_funcs(funcs=self.functions)\n        tools = custom_tools + query_engine_tools\n\n        self.__swarm = ReActAgent.from_tools(tools=tools,\n            llm=llm_from_wrapper(self.__llm, self.__config), verbose=True,\n            context=self.instruction, max_iterations=self.max_iterations)\n\n    def add_agent(self, agent: Agent):\n        if agent.name in self.__agents:\n            raise ValueError(f\"Agent `{agent.name}` already exists in the swarm.\") \n        self.__agents[agent.name] = {\"id\": agent.id,\n            \"agent\": agent,\n            \"role\": agent.role,\n            \"description\": agent.description\n        }\n        self.sdk_context.add_resource(agent, resource_type=\"agent\")\n        self._build_swarm()\n\n    def remove_agent(self, name: str):\n        if name not in self.__agents:\n            raise ValueError(f\"Agent `{name}` does not exist in the swarm.\") \n        del self.__agents[name]\n        self._build_swarm()\n\n    async def chat(self,\n        prompt: str,\n        user_id=\"default_user\",\n        session_id=\"default_chat\",\n        image_document_paths: Optional[List[str]] = [],\n    ):\n        await self._ensure_utilities_loaded()\n        db_manager = self.sdk_context.get_utility(\"db_manager\") \n\n        chat_manager = ChatManager(self.__swarm, user_id=user_id, session_id=session_id)\n        last_message = ChatMessage(role=MessageRole.USER, content=prompt)\n\n        response = await inject_additional_attributes(\n            lambda: chat_manager.generate_response(db_manager, last_message, image_document_paths),\n            {\"user_id\": user_id}\n        )\n        return response\n\n    async def chat_history(self, user_id=\"default_user\", session_id=\"default_chat\") -> dict[str, list]:\n        await self._ensure_utilities_loaded()\n        db_manager = self.sdk_context.get_utility(\"db_manager\") \n\n        chat_manager = ChatManager(self.__swarm, user_id=user_id, session_id=session_id)\n\n        chats = await chat_manager.get_all_chats_for_user(db_manager)\n        return chats\n\n    def _format_tool_name(self, name: str) -> str:\n        tmp = name.replace(\" \", \"_\").replace(\"-\", \"_\").lower()\n        exclude = string.punctuation.replace(\"_\", \"\")\n        translation_table = str.maketrans(\"\", \"\", exclude)\n        result = tmp.translate(translation_table)\n\n        return result\n\n    async def _ensure_utilities_loaded(self):\n        \"\"\"Load utilities if they are not already loaded.\"\"\"\n        if not self.__utilities_loaded:\n            await self.sdk_context.load_default_utility()\n            self.__utilities_loaded = True\n