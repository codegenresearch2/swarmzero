import os\nimport string\nimport uuid\nfrom typing import Any, Callable, Dict, List, Optional\nfrom fastapi import UploadFile\nfrom dotenv import load_dotenv\nfrom langtrace_python_sdk import inject_additional_attributes\nfrom llama_index.core.agent import AgentRunner, ReActAgent\nfrom llama_index.core.llms import ChatMessage, MessageRole\nfrom llama_index.core.tools import QueryEngineTool, ToolMetadata\nfrom swarmzero.agent import Agent\nfrom swarmzero.chat import ChatManager\nfrom swarmzero.llms.llm import LLM\nfrom swarmzero.llms.utils import llm_from_config_without_agent, llm_from_wrapper\nfrom swarmzero.sdk_context import SDKContext\nfrom swarmzero.utils import tools_from_funcs\n\nload_dotenv()\n\nclass AgentMap(Dict[str, Dict[str, Any]]):\n    def __init__(self):\n        super().__init__()\n\nclass Swarm:\n    id: str\n    name: str\n    instruction: str\n    description: str\n    __llm: LLM\n    __agents: AgentMap\n    __swarm: AgentRunner\n\n    def __init__(self, name: str, description: str, instruction: str, functions: List[Callable], agents: Optional[List[Agent]] = None, llm: Optional[LLM] = None, config_path: str = "./swarmzero_config_example.toml", swarm_id: str = os.getenv("SWARM_ID", ""), sdk_context: Optional[SDKContext] = None, max_iterations: Optional[int] = 10):\n        self.id = swarm_id if swarm_id != "" else str(uuid.uuid4())\n        self.name = name\n        self.description = description\n        self.instruction = instruction\n        self.__agents = AgentMap()\n        self.functions = functions\n        self.sdk_context = sdk_context if sdk_context is not None else SDKContext(config_path=config_path)\n        self.__config = self.sdk_context.get_config(self.name)\n        self.__llm = llm if llm is not None else llm_from_config_without_agent(self.__config)\n        self.max_iterations = max_iterations\n        self.__utilities_loaded = False\n\n        if agents is None:\n            agents = self.sdk_context.generate_agents_from_config()\n\n        if agents:\n            for agent in agents:\n                self.sdk_context.add_resource(agent, resource_type="agent")\n                self.__agents[agent.name] = {\n                    "id": agent.id,\n                    "agent": agent,\n                    "role": agent.role,\n                    "description": agent.description,\n                }\n\n            self.sdk_context.add_resource(self, resource_type="swarm")\n            self._build_swarm()\n\n    def _build_swarm(self):\n        query_engine_tools = (\n            [\n                QueryEngineTool(\n                    query_engine=agent_data["agent"],\n                    metadata=ToolMetadata(\n                        name=self._format_tool_name(agent_name),\n                        description=agent_data["description"],\n                    ),\n                )\n                for agent_name, agent_data in self.__agents.items()\n            ]\n            if self.__agents\n            else []\n        )\n\n        custom_tools = tools_from_funcs(funcs=self.functions)\n        tools = custom_tools + query_engine_tools\n\n        self.__swarm = ReActAgent.from_tools(\n            tools=tools,\n            llm=llm_from_wrapper(self.__llm, self.__config),\n            verbose=True,\n            context=self.instruction,\n            max_iterations=self.max_iterations,\n        )\n\n    def add_agent(self, agent: Agent):\n        if agent.name in self.__agents:\n            raise ValueError(f"Agent `{agent.name}` already exists in the swarm.") \n        self.__agents[agent.name] = {\n            "id": agent.id,\n            "agent": agent,\n            "role": agent.role,\n            "description": agent.description,\n        }\n        self.sdk_context.add_resource(agent, resource_type="agent")\n        self._build_swarm()\n\n    def remove_agent(self, name: str):\n        if name not in self.__agents:\n            raise ValueError(f"Agent `{name}` does not exist in the swarm.") \n        del self.__agents[name]\n        self._build_swarm()\n\n    async def chat(self, prompt: str, user_id: str = "default_user", session_id: str = "default_chat", image_document_paths: Optional[List[str]] = []):\n        await self._ensure_utilities_loaded()\n        db_manager = self.sdk_context.get_utility("db_manager")\n\n        chat_manager = ChatManager(self.__swarm, user_id=user_id, session_id=session_id)\n        last_message = ChatMessage(role=MessageRole.USER, content=prompt)\n\n        response = await inject_additional_attributes(\n            lambda: chat_manager.generate_response(db_manager, last_message, image_document_paths),\n            {"user_id": user_id}\n        )\n        return response\n\n    async def chat_history(self, user_id: str = "default_user", session_id: str = "default_chat") -> dict[str, list]:\n        await self._ensure_utilities_loaded()\n        db_manager = self.sdk_context.get_utility("db_manager")\n\n        chat_manager = ChatManager(self.__swarm, user_id=user_id, session_id=session_id)\n\n        chats = await chat_manager.get_all_chats_for_user(db_manager)\n        return chats\n\n    def _format_tool_name(self, name: str) -> str:\n        tmp = name.replace(" ", "_").replace("-", "_").lower()\n        exclude = string.punctuation.replace("_", "")\n        translation_table = str.maketrans("", "", exclude)\n        result = tmp.translate(translation_table)\n\n        return result\n\n    async def _ensure_utilities_loaded(self):\n        """Load utilities if they are not already loaded."""\n        if not self.__utilities_loaded:\n            await self.sdk_context.load_default_utility()\n            self.__utilities_loaded = True\n